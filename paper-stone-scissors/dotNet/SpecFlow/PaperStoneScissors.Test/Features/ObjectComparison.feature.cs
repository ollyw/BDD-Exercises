// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17379
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PaperStoneScissors.Test.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [MbUnit.Framework.TestFixtureAttribute()]
    [MbUnit.Framework.DescriptionAttribute("In order to be able to score the game\r\nAs a game player\r\nI must be able to compar" +
        "e objects to derive a winner")]
    public partial class PlayASingleRoundOfPaper_Stone_ScissorsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ObjectComparison.feature"
#line hidden
        
        [MbUnit.Framework.FixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Play a single round of Paper-Stone-Scissors", "In order to be able to score the game\r\nAs a game player\r\nI must be able to compar" +
                    "e objects to derive a winner", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [MbUnit.Framework.FixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [MbUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [MbUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Compare two Paper, Stone and Scissors objects")]
        [MbUnit.Framework.RowAttribute("paper", "stone", "win", "lose", new string[0])]
        [MbUnit.Framework.RowAttribute("scissors", "paper", "win", "lose", new string[0])]
        [MbUnit.Framework.RowAttribute("stone", "scissors", "win", "lose", new string[0])]
        [MbUnit.Framework.RowAttribute("stone", "paper", "lose", "win", new string[0])]
        [MbUnit.Framework.RowAttribute("paper", "scissors", "lose", "win", new string[0])]
        [MbUnit.Framework.RowAttribute("scissors", "stone", "lose", "win", new string[0])]
        [MbUnit.Framework.RowAttribute("paper", "paper", "draw", "draw", new string[0])]
        [MbUnit.Framework.RowAttribute("scissors", "scissors", "draw", "draw", new string[0])]
        [MbUnit.Framework.RowAttribute("stone", "stone", "draw", "draw", new string[0])]
        public virtual void CompareTwoPaperStoneAndScissorsObjects(string object1, string object2, string result1, string result2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare two Paper, Stone and Scissors objects", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.When(string.Format("player 1 choses {0}", object1));
#line 8
 testRunner.And(string.Format("player 2 choses {0}", object2));
#line 9
 testRunner.Then(string.Format("the result for player 1 is {0}", result1));
#line 10
 testRunner.And(string.Format("the result for player 2 is {0}", result2));
#line hidden
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Compare three Paper, Stone and Scissors objects")]
        [MbUnit.Framework.RowAttribute("paper", "stone", "stone", "win", "lose", "lose", new string[0])]
        [MbUnit.Framework.RowAttribute("stone", "paper", "scissors", "draw", "draw", "draw", new string[0])]
        public virtual void CompareThreePaperStoneAndScissorsObjects(string object1, string object2, string object3, string result1, string result2, string result3, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare three Paper, Stone and Scissors objects", exampleTags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.When(string.Format("player 1 choses {0}", object1));
#line 26
 testRunner.And(string.Format("player 2 choses {0}", object2));
#line 27
 testRunner.And(string.Format("player 3 choses {0}", object3));
#line 28
 testRunner.Then(string.Format("the result for player 1 is {0}", result1));
#line 29
 testRunner.And(string.Format("the result for player 2 is {0}", result2));
#line 30
 testRunner.And(string.Format("the result for player 2 is {0}", result2));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
